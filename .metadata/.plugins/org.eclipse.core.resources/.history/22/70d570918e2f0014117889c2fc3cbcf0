/*
===============================================================================
 Name        : osek_example_app.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <stdio.h>
#include <cr_section_macros.h>

#include "os.h"               /* <= operating system header */

/* Comment this line in order to use LPC-Link based printf()
 * If uncommented, all printf() calls will be disabled
 */
//#define printf(...)

int main(void)
{
#if defined (__USE_LPCOPEN)
#if !defined(NO_BOARD_LIB)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
    // Set the LED to the state of "On"
    Board_LED_Set(0, false);
#endif
#endif

    printf("Starting OSEK-OS in AppMode1\n");

    StartOS(AppMode1);

    while(1);

    return 0 ;
}


void ErrorHook(void)
{
	ShutdownOS(0);
}

TASK(TaskInit)
{
	printf("InitTask: SetRelAlarm for TaskPeriodic.\n");
	/* Set 1000 tick alarm for TaskPeriodic */
	SetRelAlarm(ActivateTaskPeriodic, 0, 500);

	/* Activate TaskBlink */
	printf("InitTask: Activate TaskBlink.\n");
	ActivateTask(TaskBlink);

	/* end InitTask */
	printf("InitTask: TerminateTask().\n");
	TerminateTask();
}

TASK(TaskBlink)
{
	printf("TaskBlink: Init.\n");
	while(1)
	{
		printf("TaskBlink: Waiting for event...\n");
		WaitEvent(evBlink);
		ClearEvent(evBlink);
		printf("TaskBlink: LED Toggle.\n");
		Board_LED_Toggle(0);
	}
	TerminateTask();
}

TASK(TaskPeriodic)
{
	printf("TaskPeriodic: Event set.\n");
	SetEvent(TaskBlink, evBlink);

	/* end TaskPeriodic */
	TerminateTask();
}
